assignee was in (CurrentUser()) OR reporter was in (CurrentUser()) ORDER BY createdDate

I have a secret Security Clearance.
I am an American Citizen.

At some point I did a TI software task where I calculated the input PL clock frequency to derive the RFDC frequency for multi-tile sync. This was with Tim Chermak. It was like, some TI software that generated a bunch of register commands for the specific PLL on the FPGA.


2019
    ShereKhan /  MMEW
        06/27
            Create SVD to Latex Generation Tool
            From JIRA: 
                Automatically generated Latex from CMSIS SVD specification. Informal python scripting tool to generate memory map documentation for AXI4-Lite register, FIFO, and RAM memory regions.
            From TASK:
        07/01
            Update SVD Schema
                Updated the SVD Schema with custom extensions to add support for access types (like Clear on Read), and a structure for describing how memory mapped regions are implemented in HDL.
        07/15
            Cleanup SVD to Latex Tool
        07/23
            Detailed Design CORDIC Processing Element/Subsystem
        09/03
            Code/Simulation CORDIC Processing Element/Subsystem

    UMTE / RECU (SRC8315)
        11/07
            Detailed Design DAC8771 Interface
        11/07
            Code/Simulation DAC8771 Interface
                Created AXI Single Write/Read tests with VUNIT
        11/07
            Integration/Test DAC8771 Interface 
                Verify in hardware
        12/04
            Detailed Design Resolver Interface 
        12/20
            Detailed Design I/O Recording
        12/20
            Code/Simulation I/O Recording
        12/20
            Integration/Test I/O Recording
        12/20
            Integration/Test I/O Playback

2020
    UMTE / RECU (SRC8315)
        01/02
            Code/Simulation Resolver Interface 
        ...
            Why is this entire period of time missing LMFAO
        09/15
            Motor Control TND Scripts (ZCU100/101?)
            From JIRA: 
                Python Script to test Motor Control DAC8771 chips on SRC8315. Configure and set output voltages via SPI, controlled by ZYNQ US+ PS (using the Motor Control block AXI4-Lite memory map). Verification done using an Oscilloscope.
            From Task:

    GMFA / RFSTIM (SRC8716) (ZCU111)
        10/07
            Instantiate/Test all 7 RFDC Transmit Channels (ZCU111)
            :JIRA
                Update RFDC block design to include all 7 transmit channels. Integrate IFGEN Wrapper and Sytem Generator into top level Instantiate 7 TFTL blocks. TFTL is driven by IFGEN (which means the same frequency drives each TFTL block).
            :Problems Encountered:
                DAC Tiles have two different interfaces, channel and tile. The TFTL block only supports one channel at a time. It interfaces with a DAC by writing to one of the channels and performing a handshaking routine with the tile.
                At IPR 9 I showed 3 active DACs transmitting on an Oscilloscope.
        10/07
            Design/Implement Amplitude and Phase Control on each DAC channel
            :JIRA
                Design an HDL block called I/Q Manipulation. Implement I/Q scaling controlled with AXI4-Lite memory mapped registers. These are scale factors,  basically a multiply, of the I/Q data either at full-scale (1) or down to 0. It also supported 2 input arrays (each 6 channels * 16 bits), one was for phase values, another was for amplitude values. The seventh channel was kept as a reference channel to calibrate the others to. A MUX with a select line (configurable by AXI4-Lite) chooses between the AXI4-Lite registers and the input arrays. The phase and amplitude are in polar coordinates, which meant they could be converted to a complex number using a CORDIC. Used Xilinx CORDIC? One CORDIC can be used to serially take in all 6 channels inputs. These complex numbers then feed into a complex multiplier (one per channel) with the single I/Q data stream from IFGEN going to each channels multiplier. The complex numbers generated were "static" across the input PDW.
            :NOTES
                ZCU111 board threw an ioctl error on the I2C-SPI bridge (U93, enable jumper on J23). This prevented us from programming the local LMK04208 oscillator chip (dual PLL configured at 12.8MHz).
            :TASK
                I wrote a python script called iqman.py to control the AXI4-Lite adjustments. Tested it on the ZCU111 over PS through page writing with mem_tool.py.
        10/30
            Support Azimuth Motor Control Integration on TK9 (RECU)
        12/01
            Design and Implement Multi TFTL
            :JIRA
                Updated the existing TFTL block to support writing to multiple channels per tile. On the ZCU111, each DAC Tile contains 4 DAC Channels, and each Channel has its own interface to PL, but at the Tile level exists a handshake routine that is only per Tile, and not per Channel.

2021
    GMFA / RFSTIM (SRC8716) (ZCU111)
        05/25
            Design/Implement/Integrate 10GBe UDP 
            :JIRA 
                Design / Implement / Integrate 10GBe UDP for the ZCU111.
            :NOTES
                :DESIGN
                    Used Xilinx's 10/25G Ethernet Subsystem IP (PG210), as well as the UDP Ethernet Wrapper from our shared IP library. 
                :IMPLEMENTATION
                    Connect the Rx/Tx ports from 10/25G to UDP Ethernet Wrapper. Create AXI4-Lite interfaces to connect both IP to the existing AXI4-Lite Interconnect, making them available at the PS level. Used 10/25G on one of the SFP PHY/MACs on the ZCU111. Eventually created some custom message parser logic, to extract DGEN+ specific fields from within the UDP messages themselves. Not every field from DGEN+ was specifically useful for RFSTIM (which amounted to PDW configuration and timing, as well as per-channel adjustments for I/Q Manipulation). DGEN+ acted as a sort of tactical supplement to SPG as a source of PDW data for IFGEN to consume and output to the DAC Channels.
                :INTEGRATION 
                    Primarily used the Rx side of 10/25G + UDP Ethernet Wrapper. Tx side basically existed to send out packets to the network for sanity checking that the connection was valid between DGEN+ and the ZCU111. UDP Packets were transmitted from DGEN+ to the ZCU111, containing PDW configuration and adjustment fields. Communication back to DGEN+ after ZCU111 received it was not implemented. Drop packets were simply dropped and operation continued. 
                    :LOOP-BACK TEST (FPGA->PC->FPGA):
                    Initial test before DGEN+ was fully integrated involved sending Ethernet Packets with a counter value as the UDP Payload. The UDP Header was generated over AXI4-Lite. The packet was transmitted over the SFP port via fiber optic to a 10GBe NIC (network intterface card), on a Linux Lab PC. The data looped back from the NIC to the ZCU111, and the data was monitored in real time with an ILA. 
                    :LOOP-BACK TEST (PC->FPGA->PC)
                    Open a python Socket on PC, send from 10G NIC to FPGA, and send back from FPGA to NIC. Verified manually with Wireshark on the Linux PC. This more closely represented the actual setup, of the FPGA receiving packets.
                    :RESULTS
                    First did Integration with just UDP to 10/25G, and looped right back into FPGA from SFP Transceiver. Verified manually with ILA.
                    :ISSUES
                    SFP Transceivers initially didn't establish communication with the NIC. I believed at first it was because the FPGA couldn't give the PC it's MAC (FPGA did not have Ping or ARP capability), but after manually entering a MAC address into the PC's ARP cache, the PC was still unable to establish a physical connection. Later discovered it was because that SFP Transceiver initialized itself to 1000Base mode, but the Xilinx IP specifically defaults to 10GBase standard. Investigated to find out that the SFP rate could be controlled over an I2C bridge from PS, and once the rate was set the PC saw the FPGA.  Data did not initially appear on Wireshark. Using ethtool, I discovered the received packets were incrementing the "rx_short_length_error" statistic. It turned out the generated FPGA packets were runt frames, as per IEEE 802.3, packets must be at least 64 bytes in size, with a CDC at the end. 
        09/14
            UDP Frames Dropped on Power-On
            :JIRA
                UDP Ethernet Wrapper drops the first several frames on power on. Using unchanged filters for MAC, IPv4, and UDP, packets eventually come through consistently. Captured with ILA with data sent to the board via physical loopback. 
        10/21
            Add Support for Additional PDW Source in PDW Domain Top Level
            :JIRA
                Added support for DGEN+ (ethernet packets containing PDW configurations) to the PWD Domain Top level firmware.
        10/22
            Add Support for Additional PDW Source in IFGEN IO Layer
            :JIRA
                Added support for DGEN+ (ethernet packets containing PDW configurations) to the IFGEN IO Layer firmware.
        10/22
            Add Support for Additional PDW Source in I/Q Manipulation
            :JIRA
                Added support for DGEN+ (ethernet packets containing PDW configurations) to the I/Q Manipulation firmware.
        10/26
            Simulate SRC8716 Ethernet PDW Parser
                Simulated the SRC8716 Ethernet PDW Parser in CocoTB (python)
        10/26
            Integrate SRC8716 Ethernet PDW Parser
                Integrated the SRC8716 Ethernet PDW Parser, and tested with DGEN+ hardware setup.
        11/01
            DAC NCO Tuning Updates for MTS (Multi-Tile-Sync)
                With MTS, there are two additional ports brought out of the RFDC. These are sysref_int_gating and sysref_int_reenable. 

2022
    GMFA / RFSTIM (SRC8716) (ZCU111)
        01/24
            TFTL (Transmit Frequency Tune Logic) Updates
                Add ADC NCO tuning to TFTL, and allow AXI4-Lite memory mapped registers to configure the NCO tuning to the enabled ADCs. These updates basically turned TFTL into FTL (both Tx and Tx Frequency Tune Logic).
        01/24
            Create TFTL_MMAP_LAYER IP
                Added registers for override enable, frequency, phase, phase reset, update enable, and update request.
        01/24
            Determine if Multi TFTL is Needed
                Basically merged features from tx_multi_freq_tune_logic into freq_tune_logic. Turned out nothing needed to be retained :)
        01/24
            RX Handler Updates
                Update RX Handlerto remove the override signals for NCO Tuning. Additionally removed RFTL (Receive Frequency Tune Logic) from RX Handler since the general purpose FTL block now handled both DACs and ADCs. Also updated the TFTL_MMAP_LAYER IP to be a general purpose FTL MMAP.
        01/24
            Investigate DGEN+ Dropped PDW error
                PDWs did not look correct coming out of the DACs during IPR14. When compared against SPG PDWs, they appeared to meet the configuration baseline. After updated IFGEN to the newer version, which has PDW Arbitration and Error Reporting, it gave an error code of 0x08, which meant the TFTL handshake is not occuring. 
        03/03
            Merge SRC8716 into Main
                Renamed all SRC8716 files to use that prefix, created a SRC8716 package file, built, tested, and merged back into main GMFA branch.

    Engineering Dashboard
        03/31
            Dashboard: Add Bootstrap
                Followed the flask tutorial by miguel grinberg to add bootstrap python code to the 
                Engineering Dashboard homepage.
        06/16
            Dashboard: Incorrect HTML Doctype Declarations
                Dashboard pages were being loaded in "Quirks" mode by various browsers. The HTML doctype declaration had to be moved to the top of all HTML pages to resolve this.
        06/30
            Organization Resource Planner (ORP): Added Favorite Views to Users Homepage 
                Added a section that contains favorite views.
        08/04
            Dashboard: Removed Breadcrumbs 
                Removed breadcrumbs from Goal Tracker, ORP, and other pages on Dashboard.
        08/04
            Dashboard: Remove Q/A Functionality
                Removed Q/A from routes, html, python, across entire site.
        08/04
            Dashboard: Add User Image and Top Navigation Bar 
                Created a navigation bar with dropdown. Showed users image and name, permissions, subscriptions, logout, help, and feature request. 
        08/08
            Dashboard: Add debug mode for email subscribers
                Email support would pull in credentials from the Production Server to send emails, even when working from a development server/computer. Added logic to check whether the user was running on a development or on a production server.
        11/17
            ORG Chart Profile Update
                Update ORG Chart to redirect to Users profile 
        11/17
            Dashboard: Update Profile Page
                Profile routes were updated to pass permissions to allow the server to determine if the current user had access to view the profiles labor category. All profiles are available to all users, but labor category is restricted.  

    Oberon (XCZU47DR-FFVG1517-2-i) (Zynq US+ RFSoC)
        05/04
            XMW-Teensy: 1-Wire EEPROM
                Wrote a 1-Wire driver in C to interface with a DS25EC20P-T EEPROM.
        05/04
            XMW-Teensy: 1-Wire Temperature Sensor
                Wrote a 1-Wire driver in C to interface with a MAX31826MUA+ Temperature Sensor.
        05/04
            XMW-Teensy: LVDS Deserializer
                Wrote a GPIO driver in C to interface with a MAX9208EAI+ LVDS Deserializer.
        05/20
            XTR Slice Parser
                Wrote VHDL logic to parse XDS Slice packets and feed them into parallelized slice 
                interfaces within the Xylem Transmit Receive (XTR) logic.
        05/20
            TX IQ Packet Parser
                Wrote VHDL logic to parse IQ packets (XTRI dead horse logic) where packet headers with Slice ID's are parsed and raw data is passed to XTR for scheduling.
        05/20
            RX IQ Packet Generator 
                Wrote VHDL logic to take IQ data coming from XTR and packetize it with the Scheduled Slice ID and Header attatched.
        06/28 
            Multi Channel Scaler
                Scaled incoming TX data streams for a single Amplifier by up to 1/3, depending on how many streams were active at the same time. This was to prevent overflow and saturation of data on the DACs.
        11/04
            XTRI Rx Stream Combiner 
                The IOPE had limited resource utilization to be able to handle 5 RX streams at once. To work around it, we adjusted XTR on the WPE to combine RX streams into 2/3 streams, before going over HSS to IOPE (XRFE, Xylem Receive Front End). This was like XTRI Tx (dead horse) but muxing logic instead of demuxing logic. The muxing was done based on the RF Center Frequency of each stream. Lower frequencies combined into 1 stream, higher combined into another. This was implemented with several AXI4S Crossbar Switches.
        11/17
            XTR Add Time ID to Time Check 
                Updated XTR Scheduling Time Check logic to take into account the current time ID from the Time Manager (sync'd to other FPGAs via 1 PPS) and Time ID of the scheduled Slice. At the time it was only looking at the picosecond timestamp from the Time Manager and the scheduled timestamp of the Slice. This was to adjust the logic to account for time skip and resync events properly.
        11/22
            XTR Simple Virtual Channel Lookup
                Added logic to take in RF Center Frequency and TX/RX flag to return an absolute Virtual Channel number. This was required to interface with XTR, to map incoming Slices to the correct virtual port. This was implemented with a hardcoded LUT and AXI4L UI registers to mux between.
        11/28
            Resource Optimization on HSS Wrapper 
                Updated the HSS Wrapper (AMS logic) to take in a generic boolean array to indicate if each HSS link should be instantiated or not, as the annapmicro_interface declares all 16, whereas we only needed 9 of those links. This optimization saved a few thousand registers and LUTS per uninstantiated HSS link. Because I didn't outright delete the logic for uninstantiated links, and instead drove input ports to '0' and clocks to 'Z', the Timing Reports indicated "unconstrained_internal_endpoints" and "no_clock" critical warnings. The optimization was achieved but the critical warnings could not be resolved, so the issue was shelved. This saved 4K LUTs, 1K LUTRAM, 10K FF, 4 BRAM, and 7 BUFG's.
        12/05 
            Integrated XTRI Logic into an XTR AXI4S Wrapper 
                Created an AXI4S wrapper to include all XTRI/XTR BSP related logic for the specific channel mapping required in the WPE implementation. 

2023
    Oberon (XCZU47DR-FFVG1517-2-i) (Zynq US+ RFSoC)
        01/05
            Optimized FPGA Utilization of XTR
                Initial XTR used 100K FF's and 330 BRAM. I reduced the Slice Descriptor record width that was being buffered per Slice Dispatcher (one per channel for 16 total) to only the fields required by downstream Scheduling logic. I additionally forced the use of LUTRAM instead of BRAM to buffer these descriptor records. This resulted in splitting our TX and RX descriptors into separate logic (as they required different fields). The entire RX record was required for the header logic that was sent back to XRFE on the IOPE. The TX record was made much more compact, and the buffer was changed from 1K to 512 depth to infer half BRAM's. Various buffers throughout the logic were also made to infer LUTRAM instead of BRAM. The final report went from 192 BRAM all the way down to 24 BRAM.
        01/06
            Fixed XTR AXI4S Sidebands 
                TKEEP was not being driven all the way through XTR. This caused a bug where TKEEP didn't get asserted on the last word with TLAST. Adjusted each subblock in XTR to forcibly drive TKEEP to resolve this issue.
        01/09
            Initialize XTRI Virtual Channel Lookup to Default values 
                Because Channel Mapping was constant, I updated the frequency lookup bounds registers in XTRI to use default values on bootup so that SW didn't need to configure each time on startup.
        02/02
            Combine ADC/DAC Clocks/Resets into Single RFDC Clock/Reset 
                Distributed the same clock throughout XTR to both the ADC's and DAC's.
        02/10
            TX Channel Dynamic Scaler 
                Added logic to configure Channel Scaling depending on which channels are actualy enabled on a clock by clock basis. The prototype design only has an analog attentuator per amp, so the FPGA needs to tweak DAC amplitudes across channels to that the sum meets the drive value desired for the attentuator. Channel scale values were programmable for each combination of enabled channels.
        02/14
            Handle Past Slices in XTR Gracefully
                If XTR received a Slice with a start tiem in the past and then later received the TX data for that slice, it would not gracefully accept and flush the TX data before sending it to the DACs. This would cause the HSS stream back to Xylem to back up. An Update was made to throw an error and also throw out the data so that future slices with correct timestamps could still schedule their TX data. 
        04/05
            Investigate XTR Error Reporting 
                Determined which XTR errors were important and bubbled up to top level with a local Error Reporter. Because XTR threw 136 unique errors, and the Simple Error Reporter takes up to 128 bits (64 warning, and 64 error bits), I documented and created the logic to parse in total 63 errors and 61 warnings. I removed the errors for slice request errors, which was duplicated across RX/TX and their respective NCOs. I also removed sideband buffer errors from TX and RX buffers.
    
    Engineering Dashboard
        01/18
            Goal Tracker: Updated Scoreboard formatting 
        02/01
            Goal Tracker: Filters 
                Added Instance filtering with Verified/Unverified, Ascending/Descending/ and by User. 
        
    Protean (WB3XR2) (XCZU43DR)
        03/27
            Wrote an FPGA Design document for our usage of the AMS WB3XR2 Dual RFSoC card. 
        04/10
            Investigate XDS Packet Generation Optimizations
                XDS Packet Generators are used in almost every subblock within Xylem. I generated out of context build utilization reports after removing modified header logic from the XDS Packet Generator block. Not every XDS path implements BRAM, but in total I saved 15 BRAM, 27K FFs, and 25K LUTS (about 6% of the total utilization).
        08/14
            Recreate XR2 Block Design without AMS IP
                Recreated the AMS BD without their IP included. Generated the build from AMS' scripts, exported individual XCI's from the design, updated them to be out of context, and then included them in our builds in the top level port map to the rewritten block design. I became very familiar with black boxes during this task. Before this, when trying to build, because our build scripts included AMS IP after generating the Block design in projectless flow, the Block Design would synthesize and implement as a black box. To resolve this properly, we decided to remove the AMS IP from the Block Design so that the Block Design was just dependent on Xilinx IP. I additionally brought the RFDC up to the top level, whereas AMS had placed the IP in a BD Wrapper subblock...
        09/18
            XR2 AXI4L Memory Map Infrastructure Design
                Created a document to show high level address mappings across the multiple FPGAs (from Versal Compute to RFPE0 and RFPE1). Primarily to indicate Enum ROM locations and DDR4 memory for the Compute to get peripheral information and storage addresses. I wrote a confluence page to describe how the SBC writes information over PCIE to the Compute, which then uses an AXI Over LAN subblock to talk to RFPE1 over the Data Plane Ultra Thin Pipe. RFPE1 determines if the AXI address is meant for itself, or for RFPE0. If it's intended for RFPE0, the transaction gets sent over HSS LVDS between RFPEs and gets executed on RFPE0. Each RFPE was able to allocate about 4.25GB of space (ultimately derived from Xilinx's MPSoC Address Architecture Overview documentation). The address space on each RFPE is relative to itself, but the total space on each RFPE is 64GB (12GB of which is actually user space addressable for PL). Therefore, RFPE1 dedicates for itself the full 8.5GB, but certain HPM0 and HPM1 addresses are actually intended for RFPE0. So together, each RFPE actually uses 4.25GB for user space and DDR4 PL memory.
        09/28
            XR2 Build Setup 
                From the base AMS build, updated to use Wizardz FPGA tools scripts (python code that generates TCL code in projectless flow). While doing this, I ran into a very interesting problem. Vivado, which was running in 2021.1, generated the firmware bitstream and hardware XSA from the updated AMS Block Design, which had the RFDC at the top level. Upon creating the Petalinux image, it would fail to build the FSBL and PMUFW, claiming that the libmetal driver didn't exist. Libmetal is a library dependency required for the RFDC to build in Petalinux. This driver is missing in the FSBL and PMUFW Yocto recipes in 2021.1. Xilinx claims you can download the libmetal dependency and install to your local Yocto bitbake recipes, but I wasn't able to get that to work. The workaround I decided on then, was to create the Firmware Image in 2021.1, but create the hardware XSA in 2021.2 in a seperate bash script as part of the build. Because 2021.2 Petalinux actually has the driver for this dependency, and the RFDC IP is the same version in 2021.1 and 2021.2, the FSBL and PMUFW were able to compile and build correctly. Funnily enough, this is why AMS put the RFDC in a wrapper in their BD, because this also circumvents this issue by compiling the RFDC IP seperately and AFTER the main Block Design in the Petalinux build, which enables it to move past the compile step for the BD and pull the driver from Xilinx's online IP repository for the RFDC.
        11/14
            XR2 Bringup
                I established serial and Ethernet Comms from the Lab PC, to the SBC, to an Ethernet Switch, to the XR2 (single RFSoC). We wanted to run ADC/DAC captures on our XR2, but needed to be able to SSH in first and upload our FW image, as well as run through AMS' documented recovery process. Using minicom, I was able to establish Serial comms to the SBC from the Lab PC, which I then enabled SSH for. From the SBC I could then connect to every other device in the setup, but first needed to set up the Ethernet Switch. I established the 1GbE and 10GbE links to the various cards by serially connecting to the Ethernet Switch. After establishing the IPv4 addresses, link interfaces, netmasks, gateways, speeds, and switch interface ports, I was able to connect from the SBC directly to the XR2 over SSH. Initial bringup saw a Bootloop error on the XR2. Attempting to probe the XR2 with JTAG with Xilinx System Debugger (XSDB) was not possible, because the XR2 was permanently in BootLoop state and never powered its end of the JTAG connector, so host connection could never be established. A 3.3V power supply was incorrectly connected in the 3VPX Chassis, which resolved the power-on state issue. I was pulled off of this effort before I could load my bitstream on.
        12/11
            Wizardz Build Tools: Added Capabilities and Enumeration Support 
                I integrated and updated the Capabilities and Enumeration ROM Python generation script from our shared library. I made this a pyproject installable dependency, and updated the XR2, WPE, IOPE, RFFE, and TBONE build scripts to include a Capabilities and Enumeration ROM.

From 2021 to 2024, I performed over 20 interviews (23 specifically). These were both on-site and over Zoom. I was involved in several ways with the FW interview team. I started off doing Teach Me Sessions. The goal here was basically a physchological and culture fit test. We would have the candidate explain a topic they were interested in, and follow up with questions to examine their ability to explain and teach us about subjects we were unfamiliar with. I also aided in Lunch sessions, which were basically similar, but less formal, which enabled us to get more personal and casual conversation from the candidate. Here we pick up on any red flags like language used, and we see if their interests actually line up with the position they are being hired for. Lastly, I performed technical interviews. For new hires, the objective is to determine if they can be taught and onboarded, we examine their communication skills and their understanding of classwork from undergrad. And for experienced engineers we try to determine their specific knowledge of FPGA, and really dive into their technical experience. For lead positions its equally important to assess how much functional tasking they have performed, if they have lead a team before, and if they have directly tasked anyone or led standups.
    Jeffrey Ryan        10/12/21    Teach Me     No presentation ready      Hired
    Nicholas Magari     10/14/21    Teach Me     Loves Mentoring            Hired 
    William Brown       11/12/21
    Angelo Luchetti     12/15/21    Teach Me     Rubiks Cube                -

    Jonathan Wolford    01/07/22    Teach Me                                Offer Sent
    Kim Mai             01/31/22
    Tarak Patel         03/01/22
    Prakshesh Patel     03/03/22    Teach Me    Cricket Guy                 -
    Roy Marroquin       03/28/22    Technical                               Hired 
    Kyle Schmidt        07/11/22    Teach Me    AC Synchronous Clocks       Offer Sent
    Vishavjit Parihar   07/13/22

    Benjamin John       09/28/23    Lunch       Not Enthusiastic            -
    John DeRasmo        11/16/23    Technical   AXI Something               Hired 
    Ethan Rando         11/21/23
    Jonathan Saenz      11/21/23    Technical   Already worked at SRC       Hired
    Zachary Becker      11/21/23    Lunch       Type A Personality          -
    Daniel Walsh        11/30/23    Technical   Nervous                     Hired 
    Zhongkang Fang      12/01/23    Technical   Smart MIPS                  -
    Tam Tran            12/01/23    Technical   I missed half his interview -
    Carson Hayes        12/04/23    Technical   Hand-held worse MIPS        -
    Casper Loveless     12/05/23    Technical   Knows a ton about FPGAs     Hired 
    Jonah Dingle        12/06/23    Technical   Florida self-trained        Hired 

    Salvatore Piazza    04/26/24    Technical   Wanted to come in at E3     Offer Sent

Between 2023 and 2024 I began transitioning to a Lead role, where I ran daily standup with Craig and Chris, two contractors hired externally. They were working on our RF Control Messaging Generation, Queuing, and Scheduling, which takes place over 3 FPGA cards. I became responsible for helping to architect these various paths across cards, and began to direct task Craig and Chris. Eventually Chris left the project, and a new hire, Daniel, joined the team. I was largely responsible for a lot of Daniel's onboarding process, familiarization with our FW processes, and general culture fit and mentoring.

2024
    Protean
        02/05
            Document Boot Sequence for RF Channelizer
                RF Channelizer is not an MPSoC, but pure FPGA, so there is no PS. Therefore, in order for the rest of the system to talk to it (issue AXI4L commands), there needs to be an AXI Over LAN instantiation. It needs to support booting from a base image that initializes Ethernet, so that the MCU can write tactical images to the RFFE's SPI Flash. Basically this involves writing AOL (endpoint to endpoint AXI managers) commands to RFFE, addressed to the SPI Flash block. SPI Flash breaks out two interfaces, one to write to SPI Flash memory, another to erase SPI Flash memory. Both interface over a single SPI interface to a STARTUPE3 primitive, which actually controls writing the image to the FPGA. These are CONFIGURATION dedicated FPGA pins. 
        03/06
            Update Cababilities and Enumeration Rom Generator 
                Added yaml2hdl python support to interface with yaml based memory maps instead of the pre-existing csv formatted memories.
        04/05
            FPGA Test and Development for SRC10242-03
                Non tactical FW image meant to control the GPIO and various peripherals attached to the FPGA. Most of this is AXI4-Lite controlled. The path goes from JTAG to AXI4L Crossbar Manager. Created an I/O test plan document on Confluence and wrote the top level FW to provide logic to implement each test case. 
                Did manual clock routing in design for one of the clock inputs. Clock was routed through an HDIO which is actually not on a Clock Management Tile. If you pass through IBUFDS to BUFG to MMCM, Vivado errors out. Placement rules specify a clock on a GCIO cabable pin must be on the same clock region as the BUFG it is placed on. But another rule is that the BUFG must be on the same clock region as the MMCM. Vivado will not route this smartly and it will fail, attempting to place the one BUFG on two BUFGs, one near the GCIO and one near the MMCM, and it will ultimately suggest that you use a false_path constraint. Alternatively, I found that you can specify the LOC constraint of the BUFG and MMCM, and force it to use a specific path, thus eliminating the error. 
        04/19
            RF Control Queue - Fix Timing Closure 
                RF Control Queue was originally written with all logic (AXI4L and AXI4S) on a 100MHz clock. There are various unsafe clock domain crossing in the design that are actually registering logic on the wrong clock. This needs to be cleaned up before it can be used on actual tactical builds.

2024 as Reporter (FW Lead)
        RF Control Generator    - Craig Stuber 
            RFSoC generates MORA v2.4 Packets from incoming Slice Descriptors. These contain frequency, start time, slice type, and attenuation. These MORA Packets go over the DPUTP (10GbE) link to the RFFE, which houses the active RF Components that need to be configured.
            Why MORA? Industry is moving towards standardized messaging, and it was a simple enough lift. This potentially improves future usability of the design.

        RF Control Queue        - Chris Jenkins 
            The RFFE recieves MORA Packets from the RFSoC and parses them. It 

        RF Control Interface    - Craig Stuber 

        VSWR Controller         - Daniel Walsh

        VSWR Manager            - Daniel Walsh

        RF Eval Bringup         - Craig Stuber

        Chassis Manager / RFFE Build Scripts - Daniel Walsh

2024 as TND Lead
    Involves bi-weekly standup with Software(Kyle), Hardware (Bob/Tahsin/Adam), and Leegia (what is Leegia?)
    I believe the objective is to create some MVP (minimum viable product) FW image to electrically test the FPGA. This is for GPIO, GTH, SPI, UART, JTAG, LEDs, and other peripherals. This is pretty much entirely tested with a JTAG AXI4 Manager hooked up to a mixture of our internal AXI4L IP and Xilinx AXI4L/AXI4 IP (like spi subordinate), (spi flash to startupe3/iproge2).
    
    We use a command line script for vivado hw_server to open a connection to the FPGA over JTAG on a separate port than our Vivado GUI is connected to. We can reprogram the board and also keep our test script hw_server open this way. A python script issues JTAG AXI commands over this socket to the FPGA. We abstract certain GPIO (like DSA, LED, etc) to be run as higher level functional tests. Though initially we are just interested in writing to each bit to configure each IO and verify the GPIO works electrically. We probe various test points/ resistors on the card and use an oscope to see the logic level has adjusted. The objective is to produce an automated test suite of scripts that could be used to trigger various RF events and have a technician observe working GPIO basically.

    I am also the responsible individual for higher level functional reviews where I act as the firmware representative for the board (both Chassis Manager and Channelizer). These are high level reviews where the hardware RI shows us the board schematic and abstracted view of certain functions (like VSWR, RF Control, Ethernet, etc). Basically just involves getting awareness of other peoples tasking and making sure the tasking we have planned/ or have already accomplished is reviewed and there are no sudden updates (specifically thinking of VSWR detection here, with AD7266 over LVDS SPI at 2 ADC's on a single data line).










    FPGA Engineer Requisition Requirements
    Description:
        - Architect, design, and implement FPGA solutions in VHDL
        - Design and optimize high-performance digital circuits and systems using VHDL using industry best practices and digital design methodologies.
        - Conduct functional and performance verification of FPGA designs with simulation and hardware testing, identifying and resolving design issues.
        - Analyze and understand complex system requirements and translate them into efficient and optimized embedded architectures and designs.
        - Utilize advanced tools and techniques for FPGA implementation to achieve optimized performance, power, and utilization trade-off.
        - Collaborate with digital board designers to ensure successful integration of FPGA designs onto PCBs and hardware platforms.
        - Provide technical leadership and mentorship to junior engineers, fostering growth and development in FPGA design.
        - Deep understanding of FPGA design flow including RTL design, verification, logic synthesis, prototyping, timing analysis, and lab debug.
        - Use Python, TCL and other scripting languages to automate continuous development and continuous integration CI/CD workflows.
    Requirements:
        - Proficiency in VHDL and familiarty with Xilinx FPGA toolchain
        - Proficiency with Vivado, with knowledge of recent Xilinx FPGA architectures.
        - Proficiency using RTL simulation tools.
        - Deep understanding of digital logic design, embedded systems, and FPGA architecture.
        - Experience with FPGA debugging, timing analysis, and optimization techniques.
        - Ability to work collaboratively in a team environment, with excellent communication skills
    

    FPGA Engineer Requisition Requirements
    Description:
        - Early stage R&D and commercialization across complex applications including robots, sensing, advanced manufacturing, and space.
        - Direct collaborations with engineering and exective leadership.
        - Is a fantastic opportunity to accelerate technical proficiency and career growth.
        - Work with principal FPGA, software, and hardware engineers on developing new systems and capabilities.
        - Create and integrate FPGA IP using VHDL, high level synthesis, and/or model based design tools. 
        - Deploy FPGA designs to development boards and new/custom hardware for demonstration, test, debug, and verification.
        - Generate high-reliability and high-performance designs for commercial and defense applications.
        - Understand, satisfy and adapt key system-level architectural requirements.
    Requirements:
        - Proficiency in VHDL.
        - Experience with Xilinx FPGAs/SoCs and Vivado.
        - Experience with Zynq 7000, Zynq Ultrascale+, Kintex Ultrascale+, and Spartan.
        - Effectively communicate with software development teams and generate clear, and concise documentation.
        - Experience integrate 3rd party IP cores into new designs.
        - Familiarity with multi-gigabit transceivers and embedded busses, like 1G/10G Ethernet, PCIe Gen3, CAN, and USB.
        - Familiarity with Python and TCL.
        - Comfortable with large degrees of autonomy and personal accountability.
        - Capable of methodically and creatively solving complex technical challenges.






https://stackoverflow.com/questions/43762338/how-to-remove-file-from-git-history
to remove this file from the repo history after you are done with this resume